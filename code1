import numpy as np
import cv2
import matplotlib.image as im
import numpy
import matplotlib.pyplot as plt
import os

folder = r"main folder"
c = os.listdir(folder)
num_of_criminals = len(c)


fd = cv2.CascadeClassifier(r"haarcascade_frontalface_alt.xml")
def get_image(imgname):
    img = im.imread(folder+'\\'+imgname) 
    corners = fd.detectMultiScale(img,1.3,4) 
    (x,y,w,h) = corners[0]
    img = img[y-20:y+h+20,x-20:x+w+20]
    img = cv2.resize(img,(100,100)) 
    return img

trainimg = []
trainlb = []

for subfolder in c:
    direc = (folder+'\\'+subfolder)
    img = os.listdir(direc)
for imgpath in img:
    img2= get_image(imgpath)
    trainimg.append(img2)
    trainlb.append(subfolder)
    
trainimg = trainimg.reshape(33,1,100,100)
trainimg = trainimg/255

trainlb = numpy.array(trainlb).reshape(33,1)



folder2 = r"unknown"
d = os.listdir(folder2)
unknown_person = len(d)

def get_image2(imgname1):
    img1 = im.imread(folder2+'\\'+imgname1) 
    corners = fd.detectMultiScale(img1,1.3,4) 
    (x,y,w,h) = corners[0]
    img1 = img1[y-20:y+h+20,x-20:x+w+20]
    img1 = cv2.resize(img1,(100,100)) 
    return img1

trainimgun = []
trainlbun = []

for imgname1 in d:
    imgun = get_image2(imgname1)
    trainimg.append(imgun)
    trainlb.append(imgname1[:9])
    

trainimgun = trainimg.reshape(33,1,100,100)
trainimgun = trainimg/255

trainlbun = numpy.array(trainlb).reshape(33,1)



from sklearn.preprocessing import OneHotEncoder
trainlb = OneHotEncoder().fit_transform(trainlb).toarray()
print(trainimg.shape)
print(trainlb.shape)

from keras import models,layers
from keras import backend
backend.set_image_data_format("channels_first")

model = models.Sequential()

model.add(layers.Conv2D(filters=20,kernel_size=(5,5),activation='relu',
                       input_shape=(1,100,100)))
model.add(layers.MaxPooling2D(pool_size=(2,2)))

model.add(layers.Conv2D(filters=40,kernel_size=(5,5),activation='relu'))
model.add(layers.MaxPooling2D(pool_size=(2,2)))

model.add(layers.Flatten())
model.add(layers.Dense(80,activation='relu'))
model.add(layers.Dense(3,activation='sigmoid'))

model.compile(loss='categorical_crossentropy',metrics=['accuracy'],
             optimizer='adam')
model.fit(trainimg,trainlb,batch_size=None,epochs=10,verbose=True)

labels = ['subject01','subject02',"subject03"]
def load_image2(img):
    corners = fd.detectMultiScale(img,1.3,4)
    if len(corners)==0:
        return None,None
    else:
        (x,y,w,h) = corners[0]
        img2 = img[y-20:y+h+20,x-20:x+w+20]
        img2 = cv2.resize(img2,(100,100)) 
        output = model.predict_classes(img2.reshape(1,1,100,100))
        output = labels[output[0]]
        return output, corners
    
path = "datasets\main folder\c1\subject01.wink.jpg"
img = im.imread(path)
output = load_image2(img)
print(output)

fd = cv2.CascadeClassifier(r"haarcascade_frontalface_alt.xml")
def get_face(img):
    corners = fd.detectMultiScale(img,1.3,4)
    if len(corners)==0:
        return None,None
    else:
        (x,y,w,h) = corners[0]
        img = img[x:x+h,y:y+w] # cropping the image
        img = cv2.resize(img,(100,100))
        return (x,y,w,h),img
    
vid = cv2.VideoCapture(0)
while True:
    ret,img = vid.read()
    img2 = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
    corner,img2 = get_face(img2)
    if corner!=None:
        (x,y,w,h)=corner
        output = model.predict_classes(img2.reshape(1,1,100,100))
        person = labels[output[0]]
        cv2.putText(img,person,(x,y),cv2.FONT_HERSHEY_COMPLEX,
                    1.0,(0,0,255),2)
        cv2.rectangle(img,(x,y),(x+w,y+h),(0,255,255),3)
    cv2.imshow("img",img)
    if cv2.waitKey(1) & 0xFF==ord('q'):
        break
vid.release()
cv2.destroyAllWindows()

model.save("criminal_detection.h5")